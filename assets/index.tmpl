<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<title>GoSDM630</title>
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=yes" />
	<link rel="stylesheet" href="/static/css/bootstrap.min.css">
	<link href="/static/css/app.css" rel="stylesheet">
</head>

<body>
	<nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top">
		<a class="navbar-brand" href="/">GoSDM630</a>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navContent"
		 aria-controls="navContent" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>

		<div class="collapse navbar-collapse" id="navContent">
			<ul class="navbar-nav mr-auto">
				<li class="nav-item active">
					<a class="nav-link" href="#realtime">Realtime view
						<span class="sr-only">(current)</span>
					</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="#status">Status</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="#about">About</a>
				</li>
			</ul>
			<span id="time" class="navbar-text">
				${ date } ${ time }
			</span>
		</div>
	</nav>

	<div class="container">
		<div id="realtime" class="mainsection">
			<h1>Realtime measurements</h1>
			<div id="meters">
				<p>${ message }</p>
				<table class="metertable table table-striped" v-for="(meter, idx) in meters">
					<thead class="thead-dark">
						<tr>
							<th>Meter ${ idx }</th>
							<th>L1</th>
							<th>L2</th>
							<th>L3</th>
							<th>Total</th>
						</tr>
					</thead>
					<tbody>
						<tr v-if="meter.VolLocPhsA != null || meter.VolLocPhsB != null || meter.VolLocPhsC != null">
							<td>Voltage (Volt)</td>
							<td>${ meter.VolLocPhsA }</td>
							<td>${ meter.VolLocPhsB }</td>
							<td>${ meter.VolLocPhsC }</td>
							<td>-</td>
						</tr>
						<tr v-if="meter.AmpLocPhsA != null || meter.AmpLocPhsB != null || meter.AmpLocPhsC != null">
							<td>Current (Ampere)</td>
							<td>${ meter.AmpLocPhsA }</td>
							<td>${ meter.AmpLocPhsB }</td>
							<td>${ meter.AmpLocPhsC }</td>
							<td>${ (parseFloat(meter.AmpLocPhsA) + parseFloat(meter.AmpLocPhsB) + parseFloat(meter.AmpLocPhsC)).toFixed(2) }</td>
						</tr>
						<tr v-if="meter.WLocPhsA != null || meter.WLocPhsB != null || meter.WLocPhsC != null">
							<td>Power (Watt)</td>
							<td>${ meter.WLocPhsA }</td>
							<td>${ meter.WLocPhsB }</td>
							<td>${ meter.WLocPhsC }</td>
							<td>${ (parseFloat(meter.WLocPhsA) + parseFloat(meter.WLocPhsB) + parseFloat(meter.WLocPhsC)).toFixed(2) }</td>
						</tr>
						<tr v-if="meter.AngLocPhsA != null || meter.AngLocPhsB != null || meter.AngLocPhsC != null">
							<td>Power Factor</td>
							<td>${ meter.AngLocPhsA }</td>
							<td>${ meter.AngLocPhsB }</td>
							<td>${ meter.AngLocPhsC }</td>
							<td>-</td>
						</tr>
						<tr>
							<td>Import (kWh)</td>
							<td>${ meter.TotkWhImportPhsA }</td>
							<td>${ meter.TotkWhImportPhsB }</td>
							<td>${ meter.TotkWhImportPhsC }</td>
							<td>${ meter.TotkWhImport }</td>
						</tr>
						<tr v-if="meter.TotkWhExportPhsA != null || meter.TotkWhExportPhsB != null || meter.TotkWhExportPhsC != null || meter.TotkWhExport != null">
							<td>Export (kWh)</td>
							<td>${ meter.TotkWhExportPhsA }</td>
							<td>${ meter.TotkWhExportPhsB }</td>
							<td>${ meter.TotkWhExportPhsC }</td>
							<td>${ meter.TotkWhExport }</td>
						</tr>
						<tr v-if="meter.ThdVolPhsA != null || meter.ThdVolPhsB != null || meter.ThdVolPhsC != null || meter.ThdVol != null">
							<td>THD voltage (%)</td>
							<td>${ meter.ThdVolPhsA }</td>
							<td>${ meter.ThdVolPhsB }</td>
							<td>${ meter.ThdVolPhsC }</td>
							<td>${ meter.ThdVol }</td>
						</tr>
						<tr v-if="meter.Freq != null">
							<td>Frequency (Hz)</td>
							<td>-</td>
							<td>-</td>
							<td>-</td>
							<td>${ meter.Freq }</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<div id="status" class="mainsection">
			<h1>Current Meter Status</h1>
			<div id="status">
				<table class="metertable table table-striped">
					<thead class="thead-dark">
						<tr>
							<th>Meter ID</th>
							<th>Type</th>
							<th>Status</th>
						</tr>
					</thead>
					<tbody>
						<tr v-for="(meter, idx) in meterstatus">
							<td>${ meter.Id }</td>
							<td>${ meter.Type }</td>
							<td>${ meter.Status }</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>

		<div id="about" class="mainsection">
			<h1>About GoSDM630</h1>
			<p>GoSDM630 is an interface for the Eastron SDM/Modbus Smart Meter series. Please
				<a href="https://github.com/gonium/gosdm630">refer to the documentation
				</a> for more information.</p>
			<p>This installation runs GoSDM630 version {{.SoftwareVersion}} (compiled with {{.GolangVersion}})</p>
		</div>
	</div>
	<!-- /.container -->
	<script src="/static/js/jquery-3.2.1.min.js"></script>
	<script src="/static/js/tether.min.js"></script>
	<script src="/static/js/bootstrap.min.js"></script>
	<script src="/static/js/vue.min.js"></script>
	<script src="/static/js/app.js"></script>
</body>

</html>
